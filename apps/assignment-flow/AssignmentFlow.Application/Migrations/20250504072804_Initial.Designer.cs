// <auto-generated />
using System;
using System.Collections.Generic;
using AssignmentFlow.Application.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AssignmentFlow.Application.Migrations
{
    [DbContext(typeof(AssignmentFlowDbContext))]
    [Migration("20250504072804_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssignmentFlow.Application.Assessments.Assessment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("AdjustedCount")
                        .HasColumnType("integer");

                    b.Property<string>("GradingId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("RawScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ScaleFactor")
                        .HasColumnType("numeric");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("AssignmentFlow.Application.Gradings.Grading", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RubricId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("ScaleFactor")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Gradings");
                });

            modelBuilder.Entity("AssignmentFlow.Application.Assessments.Assessment", b =>
                {
                    b.OwnsMany("AssignmentFlow.Application.Assessments.FeedbackItemApiContract", "Feedbacks", b1 =>
                        {
                            b1.Property<string>("AssessmentId")
                                .HasColumnType("character varying(50)");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Comment")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Criterion")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FileRef")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("FromCol")
                                .HasColumnType("integer");

                            b1.Property<int>("FromLine")
                                .HasColumnType("integer");

                            b1.Property<string>("Tag")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("ToCol")
                                .HasColumnType("integer");

                            b1.Property<int>("ToLine")
                                .HasColumnType("integer");

                            b1.HasKey("AssessmentId", "__synthesizedOrdinal");

                            b1.ToTable("Assessments");

                            b1.ToJson("Feedbacks");

                            b1.WithOwner()
                                .HasForeignKey("AssessmentId");
                        });

                    b.OwnsMany("AssignmentFlow.Application.Assessments.ScoreBreakdownApiContract", "ScoreBreakdowns", b1 =>
                        {
                            b1.Property<string>("AssessmentId")
                                .HasColumnType("character varying(50)");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("CriterionName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PerformanceTag")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("RawScore")
                                .HasColumnType("numeric");

                            b1.HasKey("AssessmentId", "__synthesizedOrdinal");

                            b1.ToTable("Assessments");

                            b1.ToJson("ScoreBreakdowns");

                            b1.WithOwner()
                                .HasForeignKey("AssessmentId");
                        });

                    b.Navigation("Feedbacks");

                    b.Navigation("ScoreBreakdowns");
                });

            modelBuilder.Entity("AssignmentFlow.Application.Gradings.Grading", b =>
                {
                    b.OwnsMany("AssignmentFlow.Application.Gradings.SelectorApiContract", "Selectors", b1 =>
                        {
                            b1.Property<string>("GradingId")
                                .HasColumnType("character varying(50)");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Criterion")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Pattern")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.HasKey("GradingId", "__synthesizedOrdinal");

                            b1.ToTable("Gradings");

                            b1.ToJson("Selectors");

                            b1.WithOwner()
                                .HasForeignKey("GradingId");
                        });

                    b.OwnsMany("AssignmentFlow.Application.Gradings.SubmissionApiContract", "Submissions", b1 =>
                        {
                            b1.Property<string>("GradingId")
                                .HasColumnType("character varying(50)");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Reference")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("GradingId", "__synthesizedOrdinal");

                            b1.ToTable("Gradings");

                            b1.ToJson("Submissions");

                            b1.WithOwner()
                                .HasForeignKey("GradingId");

                            b1.OwnsMany("AssignmentFlow.Application.Gradings.CriterionFilesApiContract", "CriteriaFiles", b2 =>
                                {
                                    b2.Property<string>("SubmissionApiContractGradingId")
                                        .HasColumnType("character varying(50)");

                                    b2.Property<int>("SubmissionApiContract__synthesizedOrdinal")
                                        .HasColumnType("integer");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Criterion")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<List<string>>("Files")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.HasKey("SubmissionApiContractGradingId", "SubmissionApiContract__synthesizedOrdinal", "__synthesizedOrdinal");

                                    b2.ToTable("Gradings");

                                    b2.WithOwner()
                                        .HasForeignKey("SubmissionApiContractGradingId", "SubmissionApiContract__synthesizedOrdinal");
                                });

                            b1.Navigation("CriteriaFiles");
                        });

                    b.Navigation("Selectors");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
